/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package versioned

import (
	"fmt"

	cloudv1alpha1 "kubeform.dev/provider-ovh-api/client/clientset/versioned/typed/cloud/v1alpha1"
	dbaasv1alpha1 "kubeform.dev/provider-ovh-api/client/clientset/versioned/typed/dbaas/v1alpha1"
	dedicatedv1alpha1 "kubeform.dev/provider-ovh-api/client/clientset/versioned/typed/dedicated/v1alpha1"
	domainv1alpha1 "kubeform.dev/provider-ovh-api/client/clientset/versioned/typed/domain/v1alpha1"
	ipv1alpha1 "kubeform.dev/provider-ovh-api/client/clientset/versioned/typed/ip/v1alpha1"
	iploadbalancingv1alpha1 "kubeform.dev/provider-ovh-api/client/clientset/versioned/typed/iploadbalancing/v1alpha1"
	mev1alpha1 "kubeform.dev/provider-ovh-api/client/clientset/versioned/typed/me/v1alpha1"
	vrackv1alpha1 "kubeform.dev/provider-ovh-api/client/clientset/versioned/typed/vrack/v1alpha1"

	discovery "k8s.io/client-go/discovery"
	rest "k8s.io/client-go/rest"
	flowcontrol "k8s.io/client-go/util/flowcontrol"
)

type Interface interface {
	Discovery() discovery.DiscoveryInterface
	CloudV1alpha1() cloudv1alpha1.CloudV1alpha1Interface
	DbaasV1alpha1() dbaasv1alpha1.DbaasV1alpha1Interface
	DedicatedV1alpha1() dedicatedv1alpha1.DedicatedV1alpha1Interface
	DomainV1alpha1() domainv1alpha1.DomainV1alpha1Interface
	IpV1alpha1() ipv1alpha1.IpV1alpha1Interface
	IploadbalancingV1alpha1() iploadbalancingv1alpha1.IploadbalancingV1alpha1Interface
	MeV1alpha1() mev1alpha1.MeV1alpha1Interface
	VrackV1alpha1() vrackv1alpha1.VrackV1alpha1Interface
}

// Clientset contains the clients for groups. Each group has exactly one
// version included in a Clientset.
type Clientset struct {
	*discovery.DiscoveryClient
	cloudV1alpha1           *cloudv1alpha1.CloudV1alpha1Client
	dbaasV1alpha1           *dbaasv1alpha1.DbaasV1alpha1Client
	dedicatedV1alpha1       *dedicatedv1alpha1.DedicatedV1alpha1Client
	domainV1alpha1          *domainv1alpha1.DomainV1alpha1Client
	ipV1alpha1              *ipv1alpha1.IpV1alpha1Client
	iploadbalancingV1alpha1 *iploadbalancingv1alpha1.IploadbalancingV1alpha1Client
	meV1alpha1              *mev1alpha1.MeV1alpha1Client
	vrackV1alpha1           *vrackv1alpha1.VrackV1alpha1Client
}

// CloudV1alpha1 retrieves the CloudV1alpha1Client
func (c *Clientset) CloudV1alpha1() cloudv1alpha1.CloudV1alpha1Interface {
	return c.cloudV1alpha1
}

// DbaasV1alpha1 retrieves the DbaasV1alpha1Client
func (c *Clientset) DbaasV1alpha1() dbaasv1alpha1.DbaasV1alpha1Interface {
	return c.dbaasV1alpha1
}

// DedicatedV1alpha1 retrieves the DedicatedV1alpha1Client
func (c *Clientset) DedicatedV1alpha1() dedicatedv1alpha1.DedicatedV1alpha1Interface {
	return c.dedicatedV1alpha1
}

// DomainV1alpha1 retrieves the DomainV1alpha1Client
func (c *Clientset) DomainV1alpha1() domainv1alpha1.DomainV1alpha1Interface {
	return c.domainV1alpha1
}

// IpV1alpha1 retrieves the IpV1alpha1Client
func (c *Clientset) IpV1alpha1() ipv1alpha1.IpV1alpha1Interface {
	return c.ipV1alpha1
}

// IploadbalancingV1alpha1 retrieves the IploadbalancingV1alpha1Client
func (c *Clientset) IploadbalancingV1alpha1() iploadbalancingv1alpha1.IploadbalancingV1alpha1Interface {
	return c.iploadbalancingV1alpha1
}

// MeV1alpha1 retrieves the MeV1alpha1Client
func (c *Clientset) MeV1alpha1() mev1alpha1.MeV1alpha1Interface {
	return c.meV1alpha1
}

// VrackV1alpha1 retrieves the VrackV1alpha1Client
func (c *Clientset) VrackV1alpha1() vrackv1alpha1.VrackV1alpha1Interface {
	return c.vrackV1alpha1
}

// Discovery retrieves the DiscoveryClient
func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	if c == nil {
		return nil
	}
	return c.DiscoveryClient
}

// NewForConfig creates a new Clientset for the given config.
// If config's RateLimiter is not set and QPS and Burst are acceptable,
// NewForConfig will generate a rate-limiter in configShallowCopy.
func NewForConfig(c *rest.Config) (*Clientset, error) {
	configShallowCopy := *c
	if configShallowCopy.RateLimiter == nil && configShallowCopy.QPS > 0 {
		if configShallowCopy.Burst <= 0 {
			return nil, fmt.Errorf("burst is required to be greater than 0 when RateLimiter is not set and QPS is set to greater than 0")
		}
		configShallowCopy.RateLimiter = flowcontrol.NewTokenBucketRateLimiter(configShallowCopy.QPS, configShallowCopy.Burst)
	}
	var cs Clientset
	var err error
	cs.cloudV1alpha1, err = cloudv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.dbaasV1alpha1, err = dbaasv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.dedicatedV1alpha1, err = dedicatedv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.domainV1alpha1, err = domainv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.ipV1alpha1, err = ipv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.iploadbalancingV1alpha1, err = iploadbalancingv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.meV1alpha1, err = mev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.vrackV1alpha1, err = vrackv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}

	cs.DiscoveryClient, err = discovery.NewDiscoveryClientForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	return &cs, nil
}

// NewForConfigOrDie creates a new Clientset for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *Clientset {
	var cs Clientset
	cs.cloudV1alpha1 = cloudv1alpha1.NewForConfigOrDie(c)
	cs.dbaasV1alpha1 = dbaasv1alpha1.NewForConfigOrDie(c)
	cs.dedicatedV1alpha1 = dedicatedv1alpha1.NewForConfigOrDie(c)
	cs.domainV1alpha1 = domainv1alpha1.NewForConfigOrDie(c)
	cs.ipV1alpha1 = ipv1alpha1.NewForConfigOrDie(c)
	cs.iploadbalancingV1alpha1 = iploadbalancingv1alpha1.NewForConfigOrDie(c)
	cs.meV1alpha1 = mev1alpha1.NewForConfigOrDie(c)
	cs.vrackV1alpha1 = vrackv1alpha1.NewForConfigOrDie(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClientForConfigOrDie(c)
	return &cs
}

// New creates a new Clientset for the given RESTClient.
func New(c rest.Interface) *Clientset {
	var cs Clientset
	cs.cloudV1alpha1 = cloudv1alpha1.New(c)
	cs.dbaasV1alpha1 = dbaasv1alpha1.New(c)
	cs.dedicatedV1alpha1 = dedicatedv1alpha1.New(c)
	cs.domainV1alpha1 = domainv1alpha1.New(c)
	cs.ipV1alpha1 = ipv1alpha1.New(c)
	cs.iploadbalancingV1alpha1 = iploadbalancingv1alpha1.New(c)
	cs.meV1alpha1 = mev1alpha1.New(c)
	cs.vrackV1alpha1 = vrackv1alpha1.New(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClient(c)
	return &cs
}
