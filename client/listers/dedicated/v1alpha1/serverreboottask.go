/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ovh-api/apis/dedicated/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServerRebootTaskLister helps list ServerRebootTasks.
// All objects returned here must be treated as read-only.
type ServerRebootTaskLister interface {
	// List lists all ServerRebootTasks in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServerRebootTask, err error)
	// ServerRebootTasks returns an object that can list and get ServerRebootTasks.
	ServerRebootTasks(namespace string) ServerRebootTaskNamespaceLister
	ServerRebootTaskListerExpansion
}

// serverRebootTaskLister implements the ServerRebootTaskLister interface.
type serverRebootTaskLister struct {
	indexer cache.Indexer
}

// NewServerRebootTaskLister returns a new ServerRebootTaskLister.
func NewServerRebootTaskLister(indexer cache.Indexer) ServerRebootTaskLister {
	return &serverRebootTaskLister{indexer: indexer}
}

// List lists all ServerRebootTasks in the indexer.
func (s *serverRebootTaskLister) List(selector labels.Selector) (ret []*v1alpha1.ServerRebootTask, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServerRebootTask))
	})
	return ret, err
}

// ServerRebootTasks returns an object that can list and get ServerRebootTasks.
func (s *serverRebootTaskLister) ServerRebootTasks(namespace string) ServerRebootTaskNamespaceLister {
	return serverRebootTaskNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServerRebootTaskNamespaceLister helps list and get ServerRebootTasks.
// All objects returned here must be treated as read-only.
type ServerRebootTaskNamespaceLister interface {
	// List lists all ServerRebootTasks in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServerRebootTask, err error)
	// Get retrieves the ServerRebootTask from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ServerRebootTask, error)
	ServerRebootTaskNamespaceListerExpansion
}

// serverRebootTaskNamespaceLister implements the ServerRebootTaskNamespaceLister
// interface.
type serverRebootTaskNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServerRebootTasks in the indexer for a given namespace.
func (s serverRebootTaskNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServerRebootTask, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServerRebootTask))
	})
	return ret, err
}

// Get retrieves the ServerRebootTask from the indexer for a given namespace and name.
func (s serverRebootTaskNamespaceLister) Get(name string) (*v1alpha1.ServerRebootTask, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("serverreboottask"), name)
	}
	return obj.(*v1alpha1.ServerRebootTask), nil
}
