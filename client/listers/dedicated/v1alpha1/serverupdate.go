/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ovh-api/apis/dedicated/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServerUpdateLister helps list ServerUpdates.
// All objects returned here must be treated as read-only.
type ServerUpdateLister interface {
	// List lists all ServerUpdates in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServerUpdate, err error)
	// ServerUpdates returns an object that can list and get ServerUpdates.
	ServerUpdates(namespace string) ServerUpdateNamespaceLister
	ServerUpdateListerExpansion
}

// serverUpdateLister implements the ServerUpdateLister interface.
type serverUpdateLister struct {
	indexer cache.Indexer
}

// NewServerUpdateLister returns a new ServerUpdateLister.
func NewServerUpdateLister(indexer cache.Indexer) ServerUpdateLister {
	return &serverUpdateLister{indexer: indexer}
}

// List lists all ServerUpdates in the indexer.
func (s *serverUpdateLister) List(selector labels.Selector) (ret []*v1alpha1.ServerUpdate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServerUpdate))
	})
	return ret, err
}

// ServerUpdates returns an object that can list and get ServerUpdates.
func (s *serverUpdateLister) ServerUpdates(namespace string) ServerUpdateNamespaceLister {
	return serverUpdateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServerUpdateNamespaceLister helps list and get ServerUpdates.
// All objects returned here must be treated as read-only.
type ServerUpdateNamespaceLister interface {
	// List lists all ServerUpdates in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServerUpdate, err error)
	// Get retrieves the ServerUpdate from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ServerUpdate, error)
	ServerUpdateNamespaceListerExpansion
}

// serverUpdateNamespaceLister implements the ServerUpdateNamespaceLister
// interface.
type serverUpdateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServerUpdates in the indexer for a given namespace.
func (s serverUpdateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServerUpdate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServerUpdate))
	})
	return ret, err
}

// Get retrieves the ServerUpdate from the indexer for a given namespace and name.
func (s serverUpdateNamespaceLister) Get(name string) (*v1alpha1.ServerUpdate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("serverupdate"), name)
	}
	return obj.(*v1alpha1.ServerUpdate), nil
}
