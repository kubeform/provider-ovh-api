/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ovh-api/apis/me/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IdentityUserLister helps list IdentityUsers.
// All objects returned here must be treated as read-only.
type IdentityUserLister interface {
	// List lists all IdentityUsers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IdentityUser, err error)
	// IdentityUsers returns an object that can list and get IdentityUsers.
	IdentityUsers(namespace string) IdentityUserNamespaceLister
	IdentityUserListerExpansion
}

// identityUserLister implements the IdentityUserLister interface.
type identityUserLister struct {
	indexer cache.Indexer
}

// NewIdentityUserLister returns a new IdentityUserLister.
func NewIdentityUserLister(indexer cache.Indexer) IdentityUserLister {
	return &identityUserLister{indexer: indexer}
}

// List lists all IdentityUsers in the indexer.
func (s *identityUserLister) List(selector labels.Selector) (ret []*v1alpha1.IdentityUser, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IdentityUser))
	})
	return ret, err
}

// IdentityUsers returns an object that can list and get IdentityUsers.
func (s *identityUserLister) IdentityUsers(namespace string) IdentityUserNamespaceLister {
	return identityUserNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IdentityUserNamespaceLister helps list and get IdentityUsers.
// All objects returned here must be treated as read-only.
type IdentityUserNamespaceLister interface {
	// List lists all IdentityUsers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IdentityUser, err error)
	// Get retrieves the IdentityUser from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.IdentityUser, error)
	IdentityUserNamespaceListerExpansion
}

// identityUserNamespaceLister implements the IdentityUserNamespaceLister
// interface.
type identityUserNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IdentityUsers in the indexer for a given namespace.
func (s identityUserNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IdentityUser, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IdentityUser))
	})
	return ret, err
}

// Get retrieves the IdentityUser from the indexer for a given namespace and name.
func (s identityUserNamespaceLister) Get(name string) (*v1alpha1.IdentityUser, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("identityuser"), name)
	}
	return obj.(*v1alpha1.IdentityUser), nil
}
