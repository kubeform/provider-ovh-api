/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ovh-api/apis/me/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// InstallationTemplatePartitionSchemeLister helps list InstallationTemplatePartitionSchemes.
// All objects returned here must be treated as read-only.
type InstallationTemplatePartitionSchemeLister interface {
	// List lists all InstallationTemplatePartitionSchemes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.InstallationTemplatePartitionScheme, err error)
	// InstallationTemplatePartitionSchemes returns an object that can list and get InstallationTemplatePartitionSchemes.
	InstallationTemplatePartitionSchemes(namespace string) InstallationTemplatePartitionSchemeNamespaceLister
	InstallationTemplatePartitionSchemeListerExpansion
}

// installationTemplatePartitionSchemeLister implements the InstallationTemplatePartitionSchemeLister interface.
type installationTemplatePartitionSchemeLister struct {
	indexer cache.Indexer
}

// NewInstallationTemplatePartitionSchemeLister returns a new InstallationTemplatePartitionSchemeLister.
func NewInstallationTemplatePartitionSchemeLister(indexer cache.Indexer) InstallationTemplatePartitionSchemeLister {
	return &installationTemplatePartitionSchemeLister{indexer: indexer}
}

// List lists all InstallationTemplatePartitionSchemes in the indexer.
func (s *installationTemplatePartitionSchemeLister) List(selector labels.Selector) (ret []*v1alpha1.InstallationTemplatePartitionScheme, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.InstallationTemplatePartitionScheme))
	})
	return ret, err
}

// InstallationTemplatePartitionSchemes returns an object that can list and get InstallationTemplatePartitionSchemes.
func (s *installationTemplatePartitionSchemeLister) InstallationTemplatePartitionSchemes(namespace string) InstallationTemplatePartitionSchemeNamespaceLister {
	return installationTemplatePartitionSchemeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// InstallationTemplatePartitionSchemeNamespaceLister helps list and get InstallationTemplatePartitionSchemes.
// All objects returned here must be treated as read-only.
type InstallationTemplatePartitionSchemeNamespaceLister interface {
	// List lists all InstallationTemplatePartitionSchemes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.InstallationTemplatePartitionScheme, err error)
	// Get retrieves the InstallationTemplatePartitionScheme from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.InstallationTemplatePartitionScheme, error)
	InstallationTemplatePartitionSchemeNamespaceListerExpansion
}

// installationTemplatePartitionSchemeNamespaceLister implements the InstallationTemplatePartitionSchemeNamespaceLister
// interface.
type installationTemplatePartitionSchemeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all InstallationTemplatePartitionSchemes in the indexer for a given namespace.
func (s installationTemplatePartitionSchemeNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.InstallationTemplatePartitionScheme, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.InstallationTemplatePartitionScheme))
	})
	return ret, err
}

// Get retrieves the InstallationTemplatePartitionScheme from the indexer for a given namespace and name.
func (s installationTemplatePartitionSchemeNamespaceLister) Get(name string) (*v1alpha1.InstallationTemplatePartitionScheme, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("installationtemplatepartitionscheme"), name)
	}
	return obj.(*v1alpha1.InstallationTemplatePartitionScheme), nil
}
