/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ovh-api/apis/me/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// InstallationTemplateLister helps list InstallationTemplates.
// All objects returned here must be treated as read-only.
type InstallationTemplateLister interface {
	// List lists all InstallationTemplates in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.InstallationTemplate, err error)
	// InstallationTemplates returns an object that can list and get InstallationTemplates.
	InstallationTemplates(namespace string) InstallationTemplateNamespaceLister
	InstallationTemplateListerExpansion
}

// installationTemplateLister implements the InstallationTemplateLister interface.
type installationTemplateLister struct {
	indexer cache.Indexer
}

// NewInstallationTemplateLister returns a new InstallationTemplateLister.
func NewInstallationTemplateLister(indexer cache.Indexer) InstallationTemplateLister {
	return &installationTemplateLister{indexer: indexer}
}

// List lists all InstallationTemplates in the indexer.
func (s *installationTemplateLister) List(selector labels.Selector) (ret []*v1alpha1.InstallationTemplate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.InstallationTemplate))
	})
	return ret, err
}

// InstallationTemplates returns an object that can list and get InstallationTemplates.
func (s *installationTemplateLister) InstallationTemplates(namespace string) InstallationTemplateNamespaceLister {
	return installationTemplateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// InstallationTemplateNamespaceLister helps list and get InstallationTemplates.
// All objects returned here must be treated as read-only.
type InstallationTemplateNamespaceLister interface {
	// List lists all InstallationTemplates in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.InstallationTemplate, err error)
	// Get retrieves the InstallationTemplate from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.InstallationTemplate, error)
	InstallationTemplateNamespaceListerExpansion
}

// installationTemplateNamespaceLister implements the InstallationTemplateNamespaceLister
// interface.
type installationTemplateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all InstallationTemplates in the indexer for a given namespace.
func (s installationTemplateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.InstallationTemplate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.InstallationTemplate))
	})
	return ret, err
}

// Get retrieves the InstallationTemplate from the indexer for a given namespace and name.
func (s installationTemplateNamespaceLister) Get(name string) (*v1alpha1.InstallationTemplate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("installationtemplate"), name)
	}
	return obj.(*v1alpha1.InstallationTemplate), nil
}
