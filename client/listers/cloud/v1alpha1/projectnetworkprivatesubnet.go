/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ovh-api/apis/cloud/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ProjectNetworkPrivateSubnetLister helps list ProjectNetworkPrivateSubnets.
// All objects returned here must be treated as read-only.
type ProjectNetworkPrivateSubnetLister interface {
	// List lists all ProjectNetworkPrivateSubnets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProjectNetworkPrivateSubnet, err error)
	// ProjectNetworkPrivateSubnets returns an object that can list and get ProjectNetworkPrivateSubnets.
	ProjectNetworkPrivateSubnets(namespace string) ProjectNetworkPrivateSubnetNamespaceLister
	ProjectNetworkPrivateSubnetListerExpansion
}

// projectNetworkPrivateSubnetLister implements the ProjectNetworkPrivateSubnetLister interface.
type projectNetworkPrivateSubnetLister struct {
	indexer cache.Indexer
}

// NewProjectNetworkPrivateSubnetLister returns a new ProjectNetworkPrivateSubnetLister.
func NewProjectNetworkPrivateSubnetLister(indexer cache.Indexer) ProjectNetworkPrivateSubnetLister {
	return &projectNetworkPrivateSubnetLister{indexer: indexer}
}

// List lists all ProjectNetworkPrivateSubnets in the indexer.
func (s *projectNetworkPrivateSubnetLister) List(selector labels.Selector) (ret []*v1alpha1.ProjectNetworkPrivateSubnet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProjectNetworkPrivateSubnet))
	})
	return ret, err
}

// ProjectNetworkPrivateSubnets returns an object that can list and get ProjectNetworkPrivateSubnets.
func (s *projectNetworkPrivateSubnetLister) ProjectNetworkPrivateSubnets(namespace string) ProjectNetworkPrivateSubnetNamespaceLister {
	return projectNetworkPrivateSubnetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ProjectNetworkPrivateSubnetNamespaceLister helps list and get ProjectNetworkPrivateSubnets.
// All objects returned here must be treated as read-only.
type ProjectNetworkPrivateSubnetNamespaceLister interface {
	// List lists all ProjectNetworkPrivateSubnets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProjectNetworkPrivateSubnet, err error)
	// Get retrieves the ProjectNetworkPrivateSubnet from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ProjectNetworkPrivateSubnet, error)
	ProjectNetworkPrivateSubnetNamespaceListerExpansion
}

// projectNetworkPrivateSubnetNamespaceLister implements the ProjectNetworkPrivateSubnetNamespaceLister
// interface.
type projectNetworkPrivateSubnetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ProjectNetworkPrivateSubnets in the indexer for a given namespace.
func (s projectNetworkPrivateSubnetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ProjectNetworkPrivateSubnet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProjectNetworkPrivateSubnet))
	})
	return ret, err
}

// Get retrieves the ProjectNetworkPrivateSubnet from the indexer for a given namespace and name.
func (s projectNetworkPrivateSubnetNamespaceLister) Get(name string) (*v1alpha1.ProjectNetworkPrivateSubnet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("projectnetworkprivatesubnet"), name)
	}
	return obj.(*v1alpha1.ProjectNetworkPrivateSubnet), nil
}
