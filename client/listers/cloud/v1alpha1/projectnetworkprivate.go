/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ovh-api/apis/cloud/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ProjectNetworkPrivateLister helps list ProjectNetworkPrivates.
// All objects returned here must be treated as read-only.
type ProjectNetworkPrivateLister interface {
	// List lists all ProjectNetworkPrivates in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProjectNetworkPrivate, err error)
	// ProjectNetworkPrivates returns an object that can list and get ProjectNetworkPrivates.
	ProjectNetworkPrivates(namespace string) ProjectNetworkPrivateNamespaceLister
	ProjectNetworkPrivateListerExpansion
}

// projectNetworkPrivateLister implements the ProjectNetworkPrivateLister interface.
type projectNetworkPrivateLister struct {
	indexer cache.Indexer
}

// NewProjectNetworkPrivateLister returns a new ProjectNetworkPrivateLister.
func NewProjectNetworkPrivateLister(indexer cache.Indexer) ProjectNetworkPrivateLister {
	return &projectNetworkPrivateLister{indexer: indexer}
}

// List lists all ProjectNetworkPrivates in the indexer.
func (s *projectNetworkPrivateLister) List(selector labels.Selector) (ret []*v1alpha1.ProjectNetworkPrivate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProjectNetworkPrivate))
	})
	return ret, err
}

// ProjectNetworkPrivates returns an object that can list and get ProjectNetworkPrivates.
func (s *projectNetworkPrivateLister) ProjectNetworkPrivates(namespace string) ProjectNetworkPrivateNamespaceLister {
	return projectNetworkPrivateNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ProjectNetworkPrivateNamespaceLister helps list and get ProjectNetworkPrivates.
// All objects returned here must be treated as read-only.
type ProjectNetworkPrivateNamespaceLister interface {
	// List lists all ProjectNetworkPrivates in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProjectNetworkPrivate, err error)
	// Get retrieves the ProjectNetworkPrivate from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ProjectNetworkPrivate, error)
	ProjectNetworkPrivateNamespaceListerExpansion
}

// projectNetworkPrivateNamespaceLister implements the ProjectNetworkPrivateNamespaceLister
// interface.
type projectNetworkPrivateNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ProjectNetworkPrivates in the indexer for a given namespace.
func (s projectNetworkPrivateNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ProjectNetworkPrivate, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProjectNetworkPrivate))
	})
	return ret, err
}

// Get retrieves the ProjectNetworkPrivate from the indexer for a given namespace and name.
func (s projectNetworkPrivateNamespaceLister) Get(name string) (*v1alpha1.ProjectNetworkPrivate, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("projectnetworkprivate"), name)
	}
	return obj.(*v1alpha1.ProjectNetworkPrivate), nil
}
