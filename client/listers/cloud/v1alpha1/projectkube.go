/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ovh-api/apis/cloud/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ProjectKubeLister helps list ProjectKubes.
// All objects returned here must be treated as read-only.
type ProjectKubeLister interface {
	// List lists all ProjectKubes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProjectKube, err error)
	// ProjectKubes returns an object that can list and get ProjectKubes.
	ProjectKubes(namespace string) ProjectKubeNamespaceLister
	ProjectKubeListerExpansion
}

// projectKubeLister implements the ProjectKubeLister interface.
type projectKubeLister struct {
	indexer cache.Indexer
}

// NewProjectKubeLister returns a new ProjectKubeLister.
func NewProjectKubeLister(indexer cache.Indexer) ProjectKubeLister {
	return &projectKubeLister{indexer: indexer}
}

// List lists all ProjectKubes in the indexer.
func (s *projectKubeLister) List(selector labels.Selector) (ret []*v1alpha1.ProjectKube, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProjectKube))
	})
	return ret, err
}

// ProjectKubes returns an object that can list and get ProjectKubes.
func (s *projectKubeLister) ProjectKubes(namespace string) ProjectKubeNamespaceLister {
	return projectKubeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ProjectKubeNamespaceLister helps list and get ProjectKubes.
// All objects returned here must be treated as read-only.
type ProjectKubeNamespaceLister interface {
	// List lists all ProjectKubes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProjectKube, err error)
	// Get retrieves the ProjectKube from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ProjectKube, error)
	ProjectKubeNamespaceListerExpansion
}

// projectKubeNamespaceLister implements the ProjectKubeNamespaceLister
// interface.
type projectKubeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ProjectKubes in the indexer for a given namespace.
func (s projectKubeNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ProjectKube, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProjectKube))
	})
	return ret, err
}

// Get retrieves the ProjectKube from the indexer for a given namespace and name.
func (s projectKubeNamespaceLister) Get(name string) (*v1alpha1.ProjectKube, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("projectkube"), name)
	}
	return obj.(*v1alpha1.ProjectKube), nil
}
