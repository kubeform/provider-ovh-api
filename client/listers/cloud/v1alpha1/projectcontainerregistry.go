/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ovh-api/apis/cloud/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ProjectContainerregistryLister helps list ProjectContainerregistries.
// All objects returned here must be treated as read-only.
type ProjectContainerregistryLister interface {
	// List lists all ProjectContainerregistries in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProjectContainerregistry, err error)
	// ProjectContainerregistries returns an object that can list and get ProjectContainerregistries.
	ProjectContainerregistries(namespace string) ProjectContainerregistryNamespaceLister
	ProjectContainerregistryListerExpansion
}

// projectContainerregistryLister implements the ProjectContainerregistryLister interface.
type projectContainerregistryLister struct {
	indexer cache.Indexer
}

// NewProjectContainerregistryLister returns a new ProjectContainerregistryLister.
func NewProjectContainerregistryLister(indexer cache.Indexer) ProjectContainerregistryLister {
	return &projectContainerregistryLister{indexer: indexer}
}

// List lists all ProjectContainerregistries in the indexer.
func (s *projectContainerregistryLister) List(selector labels.Selector) (ret []*v1alpha1.ProjectContainerregistry, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProjectContainerregistry))
	})
	return ret, err
}

// ProjectContainerregistries returns an object that can list and get ProjectContainerregistries.
func (s *projectContainerregistryLister) ProjectContainerregistries(namespace string) ProjectContainerregistryNamespaceLister {
	return projectContainerregistryNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ProjectContainerregistryNamespaceLister helps list and get ProjectContainerregistries.
// All objects returned here must be treated as read-only.
type ProjectContainerregistryNamespaceLister interface {
	// List lists all ProjectContainerregistries in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProjectContainerregistry, err error)
	// Get retrieves the ProjectContainerregistry from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ProjectContainerregistry, error)
	ProjectContainerregistryNamespaceListerExpansion
}

// projectContainerregistryNamespaceLister implements the ProjectContainerregistryNamespaceLister
// interface.
type projectContainerregistryNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ProjectContainerregistries in the indexer for a given namespace.
func (s projectContainerregistryNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ProjectContainerregistry, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProjectContainerregistry))
	})
	return ret, err
}

// Get retrieves the ProjectContainerregistry from the indexer for a given namespace and name.
func (s projectContainerregistryNamespaceLister) Get(name string) (*v1alpha1.ProjectContainerregistry, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("projectcontainerregistry"), name)
	}
	return obj.(*v1alpha1.ProjectContainerregistry), nil
}
