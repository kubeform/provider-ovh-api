/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ovh-api/apis/cloud/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ProjectUserLister helps list ProjectUsers.
// All objects returned here must be treated as read-only.
type ProjectUserLister interface {
	// List lists all ProjectUsers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProjectUser, err error)
	// ProjectUsers returns an object that can list and get ProjectUsers.
	ProjectUsers(namespace string) ProjectUserNamespaceLister
	ProjectUserListerExpansion
}

// projectUserLister implements the ProjectUserLister interface.
type projectUserLister struct {
	indexer cache.Indexer
}

// NewProjectUserLister returns a new ProjectUserLister.
func NewProjectUserLister(indexer cache.Indexer) ProjectUserLister {
	return &projectUserLister{indexer: indexer}
}

// List lists all ProjectUsers in the indexer.
func (s *projectUserLister) List(selector labels.Selector) (ret []*v1alpha1.ProjectUser, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProjectUser))
	})
	return ret, err
}

// ProjectUsers returns an object that can list and get ProjectUsers.
func (s *projectUserLister) ProjectUsers(namespace string) ProjectUserNamespaceLister {
	return projectUserNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ProjectUserNamespaceLister helps list and get ProjectUsers.
// All objects returned here must be treated as read-only.
type ProjectUserNamespaceLister interface {
	// List lists all ProjectUsers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProjectUser, err error)
	// Get retrieves the ProjectUser from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ProjectUser, error)
	ProjectUserNamespaceListerExpansion
}

// projectUserNamespaceLister implements the ProjectUserNamespaceLister
// interface.
type projectUserNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ProjectUsers in the indexer for a given namespace.
func (s projectUserNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ProjectUser, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProjectUser))
	})
	return ret, err
}

// Get retrieves the ProjectUser from the indexer for a given namespace and name.
func (s projectUserNamespaceLister) Get(name string) (*v1alpha1.ProjectUser, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("projectuser"), name)
	}
	return obj.(*v1alpha1.ProjectUser), nil
}
