/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ovh-api/apis/ip/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ReverseLister helps list Reverses.
// All objects returned here must be treated as read-only.
type ReverseLister interface {
	// List lists all Reverses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Reverse, err error)
	// Reverses returns an object that can list and get Reverses.
	Reverses(namespace string) ReverseNamespaceLister
	ReverseListerExpansion
}

// reverseLister implements the ReverseLister interface.
type reverseLister struct {
	indexer cache.Indexer
}

// NewReverseLister returns a new ReverseLister.
func NewReverseLister(indexer cache.Indexer) ReverseLister {
	return &reverseLister{indexer: indexer}
}

// List lists all Reverses in the indexer.
func (s *reverseLister) List(selector labels.Selector) (ret []*v1alpha1.Reverse, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Reverse))
	})
	return ret, err
}

// Reverses returns an object that can list and get Reverses.
func (s *reverseLister) Reverses(namespace string) ReverseNamespaceLister {
	return reverseNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ReverseNamespaceLister helps list and get Reverses.
// All objects returned here must be treated as read-only.
type ReverseNamespaceLister interface {
	// List lists all Reverses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Reverse, err error)
	// Get retrieves the Reverse from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Reverse, error)
	ReverseNamespaceListerExpansion
}

// reverseNamespaceLister implements the ReverseNamespaceLister
// interface.
type reverseNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Reverses in the indexer for a given namespace.
func (s reverseNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Reverse, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Reverse))
	})
	return ret, err
}

// Get retrieves the Reverse from the indexer for a given namespace and name.
func (s reverseNamespaceLister) Get(name string) (*v1alpha1.Reverse, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("reverse"), name)
	}
	return obj.(*v1alpha1.Reverse), nil
}
