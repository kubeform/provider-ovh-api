/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ovh-api/apis/vrack/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DedicatedServerLister helps list DedicatedServers.
// All objects returned here must be treated as read-only.
type DedicatedServerLister interface {
	// List lists all DedicatedServers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DedicatedServer, err error)
	// DedicatedServers returns an object that can list and get DedicatedServers.
	DedicatedServers(namespace string) DedicatedServerNamespaceLister
	DedicatedServerListerExpansion
}

// dedicatedServerLister implements the DedicatedServerLister interface.
type dedicatedServerLister struct {
	indexer cache.Indexer
}

// NewDedicatedServerLister returns a new DedicatedServerLister.
func NewDedicatedServerLister(indexer cache.Indexer) DedicatedServerLister {
	return &dedicatedServerLister{indexer: indexer}
}

// List lists all DedicatedServers in the indexer.
func (s *dedicatedServerLister) List(selector labels.Selector) (ret []*v1alpha1.DedicatedServer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DedicatedServer))
	})
	return ret, err
}

// DedicatedServers returns an object that can list and get DedicatedServers.
func (s *dedicatedServerLister) DedicatedServers(namespace string) DedicatedServerNamespaceLister {
	return dedicatedServerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DedicatedServerNamespaceLister helps list and get DedicatedServers.
// All objects returned here must be treated as read-only.
type DedicatedServerNamespaceLister interface {
	// List lists all DedicatedServers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DedicatedServer, err error)
	// Get retrieves the DedicatedServer from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DedicatedServer, error)
	DedicatedServerNamespaceListerExpansion
}

// dedicatedServerNamespaceLister implements the DedicatedServerNamespaceLister
// interface.
type dedicatedServerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DedicatedServers in the indexer for a given namespace.
func (s dedicatedServerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DedicatedServer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DedicatedServer))
	})
	return ret, err
}

// Get retrieves the DedicatedServer from the indexer for a given namespace and name.
func (s dedicatedServerNamespaceLister) Get(name string) (*v1alpha1.DedicatedServer, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dedicatedserver"), name)
	}
	return obj.(*v1alpha1.DedicatedServer), nil
}
