/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ovh-api/apis/vrack/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DedicatedServerInterfaceLister helps list DedicatedServerInterfaces.
// All objects returned here must be treated as read-only.
type DedicatedServerInterfaceLister interface {
	// List lists all DedicatedServerInterfaces in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DedicatedServerInterface, err error)
	// DedicatedServerInterfaces returns an object that can list and get DedicatedServerInterfaces.
	DedicatedServerInterfaces(namespace string) DedicatedServerInterfaceNamespaceLister
	DedicatedServerInterfaceListerExpansion
}

// dedicatedServerInterfaceLister implements the DedicatedServerInterfaceLister interface.
type dedicatedServerInterfaceLister struct {
	indexer cache.Indexer
}

// NewDedicatedServerInterfaceLister returns a new DedicatedServerInterfaceLister.
func NewDedicatedServerInterfaceLister(indexer cache.Indexer) DedicatedServerInterfaceLister {
	return &dedicatedServerInterfaceLister{indexer: indexer}
}

// List lists all DedicatedServerInterfaces in the indexer.
func (s *dedicatedServerInterfaceLister) List(selector labels.Selector) (ret []*v1alpha1.DedicatedServerInterface, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DedicatedServerInterface))
	})
	return ret, err
}

// DedicatedServerInterfaces returns an object that can list and get DedicatedServerInterfaces.
func (s *dedicatedServerInterfaceLister) DedicatedServerInterfaces(namespace string) DedicatedServerInterfaceNamespaceLister {
	return dedicatedServerInterfaceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DedicatedServerInterfaceNamespaceLister helps list and get DedicatedServerInterfaces.
// All objects returned here must be treated as read-only.
type DedicatedServerInterfaceNamespaceLister interface {
	// List lists all DedicatedServerInterfaces in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DedicatedServerInterface, err error)
	// Get retrieves the DedicatedServerInterface from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DedicatedServerInterface, error)
	DedicatedServerInterfaceNamespaceListerExpansion
}

// dedicatedServerInterfaceNamespaceLister implements the DedicatedServerInterfaceNamespaceLister
// interface.
type dedicatedServerInterfaceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DedicatedServerInterfaces in the indexer for a given namespace.
func (s dedicatedServerInterfaceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DedicatedServerInterface, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DedicatedServerInterface))
	})
	return ret, err
}

// Get retrieves the DedicatedServerInterface from the indexer for a given namespace and name.
func (s dedicatedServerInterfaceNamespaceLister) Get(name string) (*v1alpha1.DedicatedServerInterface, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dedicatedserverinterface"), name)
	}
	return obj.(*v1alpha1.DedicatedServerInterface), nil
}
