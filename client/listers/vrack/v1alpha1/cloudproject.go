/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ovh-api/apis/vrack/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CloudprojectLister helps list Cloudprojects.
// All objects returned here must be treated as read-only.
type CloudprojectLister interface {
	// List lists all Cloudprojects in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Cloudproject, err error)
	// Cloudprojects returns an object that can list and get Cloudprojects.
	Cloudprojects(namespace string) CloudprojectNamespaceLister
	CloudprojectListerExpansion
}

// cloudprojectLister implements the CloudprojectLister interface.
type cloudprojectLister struct {
	indexer cache.Indexer
}

// NewCloudprojectLister returns a new CloudprojectLister.
func NewCloudprojectLister(indexer cache.Indexer) CloudprojectLister {
	return &cloudprojectLister{indexer: indexer}
}

// List lists all Cloudprojects in the indexer.
func (s *cloudprojectLister) List(selector labels.Selector) (ret []*v1alpha1.Cloudproject, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Cloudproject))
	})
	return ret, err
}

// Cloudprojects returns an object that can list and get Cloudprojects.
func (s *cloudprojectLister) Cloudprojects(namespace string) CloudprojectNamespaceLister {
	return cloudprojectNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CloudprojectNamespaceLister helps list and get Cloudprojects.
// All objects returned here must be treated as read-only.
type CloudprojectNamespaceLister interface {
	// List lists all Cloudprojects in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Cloudproject, err error)
	// Get retrieves the Cloudproject from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Cloudproject, error)
	CloudprojectNamespaceListerExpansion
}

// cloudprojectNamespaceLister implements the CloudprojectNamespaceLister
// interface.
type cloudprojectNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Cloudprojects in the indexer for a given namespace.
func (s cloudprojectNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Cloudproject, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Cloudproject))
	})
	return ret, err
}

// Get retrieves the Cloudproject from the indexer for a given namespace and name.
func (s cloudprojectNamespaceLister) Get(name string) (*v1alpha1.Cloudproject, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cloudproject"), name)
	}
	return obj.(*v1alpha1.Cloudproject), nil
}
