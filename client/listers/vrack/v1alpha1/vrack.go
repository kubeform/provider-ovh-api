/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ovh-api/apis/vrack/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VrackLister helps list Vracks.
// All objects returned here must be treated as read-only.
type VrackLister interface {
	// List lists all Vracks in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Vrack, err error)
	// Vracks returns an object that can list and get Vracks.
	Vracks(namespace string) VrackNamespaceLister
	VrackListerExpansion
}

// vrackLister implements the VrackLister interface.
type vrackLister struct {
	indexer cache.Indexer
}

// NewVrackLister returns a new VrackLister.
func NewVrackLister(indexer cache.Indexer) VrackLister {
	return &vrackLister{indexer: indexer}
}

// List lists all Vracks in the indexer.
func (s *vrackLister) List(selector labels.Selector) (ret []*v1alpha1.Vrack, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Vrack))
	})
	return ret, err
}

// Vracks returns an object that can list and get Vracks.
func (s *vrackLister) Vracks(namespace string) VrackNamespaceLister {
	return vrackNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VrackNamespaceLister helps list and get Vracks.
// All objects returned here must be treated as read-only.
type VrackNamespaceLister interface {
	// List lists all Vracks in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Vrack, err error)
	// Get retrieves the Vrack from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Vrack, error)
	VrackNamespaceListerExpansion
}

// vrackNamespaceLister implements the VrackNamespaceLister
// interface.
type vrackNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Vracks in the indexer for a given namespace.
func (s vrackNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Vrack, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Vrack))
	})
	return ret, err
}

// Get retrieves the Vrack from the indexer for a given namespace and name.
func (s vrackNamespaceLister) Get(name string) (*v1alpha1.Vrack, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("vrack"), name)
	}
	return obj.(*v1alpha1.Vrack), nil
}
