/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ovh-api/apis/iploadbalancing/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RefreshLister helps list Refreshes.
// All objects returned here must be treated as read-only.
type RefreshLister interface {
	// List lists all Refreshes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Refresh, err error)
	// Refreshes returns an object that can list and get Refreshes.
	Refreshes(namespace string) RefreshNamespaceLister
	RefreshListerExpansion
}

// refreshLister implements the RefreshLister interface.
type refreshLister struct {
	indexer cache.Indexer
}

// NewRefreshLister returns a new RefreshLister.
func NewRefreshLister(indexer cache.Indexer) RefreshLister {
	return &refreshLister{indexer: indexer}
}

// List lists all Refreshes in the indexer.
func (s *refreshLister) List(selector labels.Selector) (ret []*v1alpha1.Refresh, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Refresh))
	})
	return ret, err
}

// Refreshes returns an object that can list and get Refreshes.
func (s *refreshLister) Refreshes(namespace string) RefreshNamespaceLister {
	return refreshNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RefreshNamespaceLister helps list and get Refreshes.
// All objects returned here must be treated as read-only.
type RefreshNamespaceLister interface {
	// List lists all Refreshes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Refresh, err error)
	// Get retrieves the Refresh from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Refresh, error)
	RefreshNamespaceListerExpansion
}

// refreshNamespaceLister implements the RefreshNamespaceLister
// interface.
type refreshNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Refreshes in the indexer for a given namespace.
func (s refreshNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Refresh, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Refresh))
	})
	return ret, err
}

// Get retrieves the Refresh from the indexer for a given namespace and name.
func (s refreshNamespaceLister) Get(name string) (*v1alpha1.Refresh, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("refresh"), name)
	}
	return obj.(*v1alpha1.Refresh), nil
}
