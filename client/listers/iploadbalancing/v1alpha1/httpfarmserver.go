/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ovh-api/apis/iploadbalancing/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HttpFarmServerLister helps list HttpFarmServers.
// All objects returned here must be treated as read-only.
type HttpFarmServerLister interface {
	// List lists all HttpFarmServers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HttpFarmServer, err error)
	// HttpFarmServers returns an object that can list and get HttpFarmServers.
	HttpFarmServers(namespace string) HttpFarmServerNamespaceLister
	HttpFarmServerListerExpansion
}

// httpFarmServerLister implements the HttpFarmServerLister interface.
type httpFarmServerLister struct {
	indexer cache.Indexer
}

// NewHttpFarmServerLister returns a new HttpFarmServerLister.
func NewHttpFarmServerLister(indexer cache.Indexer) HttpFarmServerLister {
	return &httpFarmServerLister{indexer: indexer}
}

// List lists all HttpFarmServers in the indexer.
func (s *httpFarmServerLister) List(selector labels.Selector) (ret []*v1alpha1.HttpFarmServer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HttpFarmServer))
	})
	return ret, err
}

// HttpFarmServers returns an object that can list and get HttpFarmServers.
func (s *httpFarmServerLister) HttpFarmServers(namespace string) HttpFarmServerNamespaceLister {
	return httpFarmServerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HttpFarmServerNamespaceLister helps list and get HttpFarmServers.
// All objects returned here must be treated as read-only.
type HttpFarmServerNamespaceLister interface {
	// List lists all HttpFarmServers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HttpFarmServer, err error)
	// Get retrieves the HttpFarmServer from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.HttpFarmServer, error)
	HttpFarmServerNamespaceListerExpansion
}

// httpFarmServerNamespaceLister implements the HttpFarmServerNamespaceLister
// interface.
type httpFarmServerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HttpFarmServers in the indexer for a given namespace.
func (s httpFarmServerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.HttpFarmServer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HttpFarmServer))
	})
	return ret, err
}

// Get retrieves the HttpFarmServer from the indexer for a given namespace and name.
func (s httpFarmServerNamespaceLister) Get(name string) (*v1alpha1.HttpFarmServer, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("httpfarmserver"), name)
	}
	return obj.(*v1alpha1.HttpFarmServer), nil
}
