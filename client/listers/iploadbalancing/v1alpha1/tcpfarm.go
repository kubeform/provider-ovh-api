/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ovh-api/apis/iploadbalancing/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TcpFarmLister helps list TcpFarms.
// All objects returned here must be treated as read-only.
type TcpFarmLister interface {
	// List lists all TcpFarms in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TcpFarm, err error)
	// TcpFarms returns an object that can list and get TcpFarms.
	TcpFarms(namespace string) TcpFarmNamespaceLister
	TcpFarmListerExpansion
}

// tcpFarmLister implements the TcpFarmLister interface.
type tcpFarmLister struct {
	indexer cache.Indexer
}

// NewTcpFarmLister returns a new TcpFarmLister.
func NewTcpFarmLister(indexer cache.Indexer) TcpFarmLister {
	return &tcpFarmLister{indexer: indexer}
}

// List lists all TcpFarms in the indexer.
func (s *tcpFarmLister) List(selector labels.Selector) (ret []*v1alpha1.TcpFarm, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TcpFarm))
	})
	return ret, err
}

// TcpFarms returns an object that can list and get TcpFarms.
func (s *tcpFarmLister) TcpFarms(namespace string) TcpFarmNamespaceLister {
	return tcpFarmNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TcpFarmNamespaceLister helps list and get TcpFarms.
// All objects returned here must be treated as read-only.
type TcpFarmNamespaceLister interface {
	// List lists all TcpFarms in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TcpFarm, err error)
	// Get retrieves the TcpFarm from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TcpFarm, error)
	TcpFarmNamespaceListerExpansion
}

// tcpFarmNamespaceLister implements the TcpFarmNamespaceLister
// interface.
type tcpFarmNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TcpFarms in the indexer for a given namespace.
func (s tcpFarmNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TcpFarm, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TcpFarm))
	})
	return ret, err
}

// Get retrieves the TcpFarm from the indexer for a given namespace and name.
func (s tcpFarmNamespaceLister) Get(name string) (*v1alpha1.TcpFarm, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("tcpfarm"), name)
	}
	return obj.(*v1alpha1.TcpFarm), nil
}
