/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ovh-api/apis/iploadbalancing/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HttpFrontendLister helps list HttpFrontends.
// All objects returned here must be treated as read-only.
type HttpFrontendLister interface {
	// List lists all HttpFrontends in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HttpFrontend, err error)
	// HttpFrontends returns an object that can list and get HttpFrontends.
	HttpFrontends(namespace string) HttpFrontendNamespaceLister
	HttpFrontendListerExpansion
}

// httpFrontendLister implements the HttpFrontendLister interface.
type httpFrontendLister struct {
	indexer cache.Indexer
}

// NewHttpFrontendLister returns a new HttpFrontendLister.
func NewHttpFrontendLister(indexer cache.Indexer) HttpFrontendLister {
	return &httpFrontendLister{indexer: indexer}
}

// List lists all HttpFrontends in the indexer.
func (s *httpFrontendLister) List(selector labels.Selector) (ret []*v1alpha1.HttpFrontend, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HttpFrontend))
	})
	return ret, err
}

// HttpFrontends returns an object that can list and get HttpFrontends.
func (s *httpFrontendLister) HttpFrontends(namespace string) HttpFrontendNamespaceLister {
	return httpFrontendNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HttpFrontendNamespaceLister helps list and get HttpFrontends.
// All objects returned here must be treated as read-only.
type HttpFrontendNamespaceLister interface {
	// List lists all HttpFrontends in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HttpFrontend, err error)
	// Get retrieves the HttpFrontend from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.HttpFrontend, error)
	HttpFrontendNamespaceListerExpansion
}

// httpFrontendNamespaceLister implements the HttpFrontendNamespaceLister
// interface.
type httpFrontendNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HttpFrontends in the indexer for a given namespace.
func (s httpFrontendNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.HttpFrontend, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HttpFrontend))
	})
	return ret, err
}

// Get retrieves the HttpFrontend from the indexer for a given namespace and name.
func (s httpFrontendNamespaceLister) Get(name string) (*v1alpha1.HttpFrontend, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("httpfrontend"), name)
	}
	return obj.(*v1alpha1.HttpFrontend), nil
}
