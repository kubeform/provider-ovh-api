/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ovh-api/apis/iploadbalancing/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HttpRouteLister helps list HttpRoutes.
// All objects returned here must be treated as read-only.
type HttpRouteLister interface {
	// List lists all HttpRoutes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HttpRoute, err error)
	// HttpRoutes returns an object that can list and get HttpRoutes.
	HttpRoutes(namespace string) HttpRouteNamespaceLister
	HttpRouteListerExpansion
}

// httpRouteLister implements the HttpRouteLister interface.
type httpRouteLister struct {
	indexer cache.Indexer
}

// NewHttpRouteLister returns a new HttpRouteLister.
func NewHttpRouteLister(indexer cache.Indexer) HttpRouteLister {
	return &httpRouteLister{indexer: indexer}
}

// List lists all HttpRoutes in the indexer.
func (s *httpRouteLister) List(selector labels.Selector) (ret []*v1alpha1.HttpRoute, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HttpRoute))
	})
	return ret, err
}

// HttpRoutes returns an object that can list and get HttpRoutes.
func (s *httpRouteLister) HttpRoutes(namespace string) HttpRouteNamespaceLister {
	return httpRouteNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HttpRouteNamespaceLister helps list and get HttpRoutes.
// All objects returned here must be treated as read-only.
type HttpRouteNamespaceLister interface {
	// List lists all HttpRoutes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HttpRoute, err error)
	// Get retrieves the HttpRoute from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.HttpRoute, error)
	HttpRouteNamespaceListerExpansion
}

// httpRouteNamespaceLister implements the HttpRouteNamespaceLister
// interface.
type httpRouteNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HttpRoutes in the indexer for a given namespace.
func (s httpRouteNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.HttpRoute, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HttpRoute))
	})
	return ret, err
}

// Get retrieves the HttpRoute from the indexer for a given namespace and name.
func (s httpRouteNamespaceLister) Get(name string) (*v1alpha1.HttpRoute, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("httproute"), name)
	}
	return obj.(*v1alpha1.HttpRoute), nil
}
