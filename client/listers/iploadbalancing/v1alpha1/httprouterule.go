/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ovh-api/apis/iploadbalancing/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HttpRouteRuleLister helps list HttpRouteRules.
// All objects returned here must be treated as read-only.
type HttpRouteRuleLister interface {
	// List lists all HttpRouteRules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HttpRouteRule, err error)
	// HttpRouteRules returns an object that can list and get HttpRouteRules.
	HttpRouteRules(namespace string) HttpRouteRuleNamespaceLister
	HttpRouteRuleListerExpansion
}

// httpRouteRuleLister implements the HttpRouteRuleLister interface.
type httpRouteRuleLister struct {
	indexer cache.Indexer
}

// NewHttpRouteRuleLister returns a new HttpRouteRuleLister.
func NewHttpRouteRuleLister(indexer cache.Indexer) HttpRouteRuleLister {
	return &httpRouteRuleLister{indexer: indexer}
}

// List lists all HttpRouteRules in the indexer.
func (s *httpRouteRuleLister) List(selector labels.Selector) (ret []*v1alpha1.HttpRouteRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HttpRouteRule))
	})
	return ret, err
}

// HttpRouteRules returns an object that can list and get HttpRouteRules.
func (s *httpRouteRuleLister) HttpRouteRules(namespace string) HttpRouteRuleNamespaceLister {
	return httpRouteRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HttpRouteRuleNamespaceLister helps list and get HttpRouteRules.
// All objects returned here must be treated as read-only.
type HttpRouteRuleNamespaceLister interface {
	// List lists all HttpRouteRules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HttpRouteRule, err error)
	// Get retrieves the HttpRouteRule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.HttpRouteRule, error)
	HttpRouteRuleNamespaceListerExpansion
}

// httpRouteRuleNamespaceLister implements the HttpRouteRuleNamespaceLister
// interface.
type httpRouteRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HttpRouteRules in the indexer for a given namespace.
func (s httpRouteRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.HttpRouteRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HttpRouteRule))
	})
	return ret, err
}

// Get retrieves the HttpRouteRule from the indexer for a given namespace and name.
func (s httpRouteRuleNamespaceLister) Get(name string) (*v1alpha1.HttpRouteRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("httprouterule"), name)
	}
	return obj.(*v1alpha1.HttpRouteRule), nil
}
