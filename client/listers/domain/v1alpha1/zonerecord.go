/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-ovh-api/apis/domain/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ZoneRecordLister helps list ZoneRecords.
// All objects returned here must be treated as read-only.
type ZoneRecordLister interface {
	// List lists all ZoneRecords in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ZoneRecord, err error)
	// ZoneRecords returns an object that can list and get ZoneRecords.
	ZoneRecords(namespace string) ZoneRecordNamespaceLister
	ZoneRecordListerExpansion
}

// zoneRecordLister implements the ZoneRecordLister interface.
type zoneRecordLister struct {
	indexer cache.Indexer
}

// NewZoneRecordLister returns a new ZoneRecordLister.
func NewZoneRecordLister(indexer cache.Indexer) ZoneRecordLister {
	return &zoneRecordLister{indexer: indexer}
}

// List lists all ZoneRecords in the indexer.
func (s *zoneRecordLister) List(selector labels.Selector) (ret []*v1alpha1.ZoneRecord, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ZoneRecord))
	})
	return ret, err
}

// ZoneRecords returns an object that can list and get ZoneRecords.
func (s *zoneRecordLister) ZoneRecords(namespace string) ZoneRecordNamespaceLister {
	return zoneRecordNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ZoneRecordNamespaceLister helps list and get ZoneRecords.
// All objects returned here must be treated as read-only.
type ZoneRecordNamespaceLister interface {
	// List lists all ZoneRecords in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ZoneRecord, err error)
	// Get retrieves the ZoneRecord from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ZoneRecord, error)
	ZoneRecordNamespaceListerExpansion
}

// zoneRecordNamespaceLister implements the ZoneRecordNamespaceLister
// interface.
type zoneRecordNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ZoneRecords in the indexer for a given namespace.
func (s zoneRecordNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ZoneRecord, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ZoneRecord))
	})
	return ret, err
}

// Get retrieves the ZoneRecord from the indexer for a given namespace and name.
func (s zoneRecordNamespaceLister) Get(name string) (*v1alpha1.ZoneRecord, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("zonerecord"), name)
	}
	return obj.(*v1alpha1.ZoneRecord), nil
}
